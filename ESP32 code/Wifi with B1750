#include <Arduino.h>
#include <WiFi.h>
#include <BH1750.h>
#include <Wire.h>
#include "driver/gpio.h"
#define TIME_TO_SLEEP 5
#include <string.h>

BH1750 lightMeter;
float old_lux = -100;


const char *SSID = "Fille";
const char *PWD = "fillemanet";

void connectToWiFi() {
  Serial.print("Connectiog to ");
 
  WiFi.begin(SSID, PWD);
  Serial.println(SSID);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("Connected.");
  
}

#include <PubSubClient.h>
// MQTT client
WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient); 
char *mqttServer = "192.168.8.152";
int mqttPort = 1883;

void setupMQTT() {
  mqttClient.setServer(mqttServer, mqttPort);
  // set the callback function
//  mqttClient.setCallback(callback);
}

void setup() {
  connectToWiFi();
  setupMQTT();
  Serial.begin(115200);
  
  pinMode(33, INPUT); //SDA
  pinMode(32, OUTPUT); //SCL
  
  // Initialize the I2C bus (BH1750 library doesn't do this automatically)
  Wire.begin(33,32);
  // On esp8266 you can select SCL and SDA pins using Wire.begin(D4, D3);
  // For Wemos / Lolin D1 Mini Pro and the Ambient Light shield use
  // Wire.begin(D2, D1);
  
  lightMeter.begin();

  Serial.println(F("BH1750 Test begin"));

}

void reconnect() {
  Serial.println("Connecting to MQTT Broker...");
  while (!mqttClient.connected()) {
      Serial.println("Reconnecting to MQTT Broker..");
      String clientId = "ESP32Client-";
      clientId += String(random(0xffff), HEX);
      
      if (mqttClient.connect(clientId.c_str())) {
        Serial.println("Connected.");
      }
      
  }
}


void loop() {
  Serial.println("Sleep");
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * 1000000);
  Serial.println("Wake");
  int lux = lightMeter.readLightLevel();
   
  Serial.print("Light: ");
  Serial.print(lux);
  Serial.println(" lx \n");
  delay(1000);
  if (50 < lux-old_lux) {
    Serial.println(lux-old_lux );
    old_lux = lux;
    Serial.print("Old lux: ");
    Serial.println(old_lux );
    }
  else if (lux-old_lux < -50) {
    Serial.println(lux-old_lux );
    old_lux = lux;
    Serial.print("Old lux: ");
    Serial.println(old_lux );
    }
  
  int lux1 = lightMeter.readLightLevel();
  char *a;
  sprintf(a, "%d", lux1);
  
  if (!mqttClient.connected())
    reconnect();

  mqttClient.loop();
  mqttClient.publish("esp32/light_sensor", a);
  delay(2000);
  
  }
